<?xml version="1.0" encoding="UTF-8"?>
<!-- see Product.wxs.comments.txt for more comments -->
<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi" >
  <Product Id="*" UpgradeCode="{FC6FB3A2-65DE-41A9-AD91-D10A402BD641}" Language="1033"
    Manufacturer="SaltStack, Inc"
    Name="Salt Minion $(var.DisplayVersion)"
    Version="$(var.InternalVersion)">

    <Package InstallerVersion="200" Compressed="yes" InstallScope="perMachine" />

    <MajorUpgrade
      DowngradeErrorMessage="A newer version of [ProductName] is already installed."
      AllowSameVersionUpgrades="yes" />
    <MediaTemplate EmbedCab="yes" CompressionLevel="low" />

    <Feature Id="ProductFeature" Title="Minion" Level="1">
      <ComponentGroupRef Id="ProductComponents" />
    </Feature>

    <Icon Id="icon" SourceFile="$(var.dist)\salt.ico" />
    <WixVariable Id="WixUILicenseRtf" Value="LICENSE.rtf" />

    <!-- override the banners -->
    <WixVariable Id="WixUIBannerBmp" Value="Banner.jpg" />
    <WixVariable Id="WixUIDialogBmp" Value="Dialog.jpg" />

    <!-- set default values -->
    <Property Id="ROOTDRIVE"                Value="$(env.SystemDrive)"   /> 
    <Property Id="ARPPRODUCTICON"           Value="icon"                 />
    <Property Id="ARPURLINFOABOUT"          Value="http://saltstack.org" />
    <Property Id="MASTER_HOSTNAME999"          Value="salt"                 />
    <Property Id="MINION_HOSTNAME999"          Value="$(env.COMPUTERNAME)"  />
    <Property Id="WIXUI_INSTALLDIR"         Value="INSTALLFOLDER"        />
    <Property Id="MSIRESTARTMANAGERCONTROL" Value="Disable"              />

    <Property Id="MASTER_HOSTNAME" Value="salt">
      <IniFileSearch Id="IniFileSearchID1" Name="SaltstackMinionConfigBackup.ini" Section="Backup" Key="master" Type="raw" />
    </Property>

    <Property Id="MINION_HOSTNAME"          Value="$(env.COMPUTERNAME)">
      <IniFileSearch Id="IniFileSearchID2" Name="SaltstackMinionConfigBackup.ini" Section="Backup" Key="id" Type="raw" />
    </Property>
    <!-- 2016-11-13  mkr
		We need a custom action to manipulate a previous NSIS installation.
		This custom action must start before any file operation.
		Catch: the manipulation will essentially uninstall NSIS, but leave the configuration.
		If the installer than fails, this is a catch.

		Attempt 1: FAIL
		  Before='InstallFiles' in InstallExecuteSequence is already too late.

		Attempt 2:
		 Before='LaunchConditions' in 4 sequences.
		 The custom action is named PrepareEvironmentBeforeInstallation
		 From     http://stackoverflow.com/questions/11668875/execute-a-custom-action-before-product-condition
		   The LaunchConditions action is scheduled to run in both InstallUISequence and InstallExecuteSequence.
		   You must specify such a custom action in both sequences.
		   You should define it with Execute='firstSequence' attribute - this way it will run only the first sequence it is met in.
		 It is defined in wix/MinionMSI/MinionConfigurationExtensionCA.wxs
		 It is coded   in wix/MinionConfigurationExtension/MinionConfiguration.cs

		 From  http://wixtoolset.org/documentation/manual/v3/xsd/wix/launchconditions.html
		   Found two more parent sequences. I add all of them.

		In a /l*v log file, PrepareEvironmentBeforeInstallation is around line 132, only after actions INSTALL and FindRelatedProducts.
		I have the impression, this is early enough.

		Attempt 3: FAIL
		Are these alternatives?
		  wixtoolset.org/documentation/manual/v3/xsd/wix/findrelatedproducts.html    | no because it only modifies the UpgradeTable.
		  wixtoolset.org/documentation/manual/v3/xsd/wix/migratefeaturestates.html   | no because NSIS has no feature states
		  wixtoolset.org/documentation/manual/v3/xsd/wix/removeexistingproducts.html | no because we must not uninstall NSIS, just peel it.

		Note 1:
		 LaunchConditions seems only to terminate the installer.
     
     2016-11-29  mkr problem: 
        Custom Action='PrepareEvironmentBeforeInstallation' Before='LaunchConditions' 
     log file sequence:
        Doing action: AppSearch
        AppSearch: Property: MASTER_HOSTNAME, Signature: IniFileSearchID1
        Doing action: PrepareEvironmentBeforeInstallation
     so it is too late to write NSIS variables into an ini file, because the ini file is already read.
     Same with before AppSearch.
     Out of options.
     hard to understand:      http://robmensching.com/blog/posts/2010/5/2/the-wix-toolsets-remember-property-pattern/
     read  http://stackoverflow.com/questions/3449770/how-do-i-read-app-config-values-and-set-properties-in-wix
     read  http://stackoverflow.com/questions/23805767/wix-custom-actions-reading-parameters-from-an-xml-file
     
     using session["MASTER_HOSTNAME"] = value; 
     I (wrongly?) remmembered that I cannot access CA Parameter in immediate actions.
     So I can delete the attempt to write to the ini file.
	-->

    <InstallUISequence>
      <Custom Action='PrepareEvironmentBeforeInstallation' Before='AppSearch'>NOT Installed</Custom>
    </InstallUISequence>

    <InstallExecuteSequence>
      <Custom Action='PrepareEvironmentBeforeInstallation' Before='AppSearch'>NOT Installed</Custom>

      <!-- 2016-11-13  mkr  Both C# and WiX custom actions are forced into an execution order by the Before attribute. -->
      <!-- 2016-11-17  mkr  The 6 custom actions only write to conf/minion, not read -->
      <Custom Action='SetRootDirPropertiesCA' Before='SetRootDir'>NOT Installed</Custom>
      <Custom Action='SetRootDir' Before='SetMasterPropertiesCA'>NOT Installed</Custom>

      <Custom Action='SetMasterPropertiesCA' Before='SetMaster'>NOT Installed</Custom>
      <Custom Action='SetMaster' Before='SetMinionIdPropertiesCA'>NOT Installed</Custom>

      <Custom Action='SetMinionIdPropertiesCA' Before='SetMinionId'>NOT Installed</Custom>
      <Custom Action='SetMinionId' Before='StartServices'>NOT Installed</Custom>

      <StartServices Sequence="5900">
        <![CDATA[START_MINION_SERVICE = "1"]]>
      </StartServices>
    </InstallExecuteSequence>

    <UIRef Id="WixUI_Minion" />
  </Product>

  <Fragment>
    <Directory Id="TARGETDIR" Name="SourceDir">
      <Directory Id="INSTALLFOLDER" Name="salt" />
    </Directory>
  </Fragment>

  <Fragment>
    <ComponentGroup Id="ProductComponents" Directory="INSTALLFOLDER">
      <ComponentGroupRef Id="dist" />
      <ComponentGroupRef Id="service" />
    </ComponentGroup>
  </Fragment>
</Wix>
