<?xml version="1.0" encoding="UTF-8"?>
<!-- see Product.wxs.comments.txt for more comments -->
<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi" xmlns:util="http://schemas.microsoft.com/wix/UtilExtension" >
  <Product Manufacturer="SaltStack, Inc." Name="Salt Minion $(var.DisplayVersion)" UpgradeCode="{FC6FB3A2-65DE-41A9-AD91-D10A402BD641}" 
    Id="*" Language="1033" Version="$(var.InternalVersion)">

    <!-- Windows Installer Version 3.0 = 300 -->
    <Package Keywords="Infrastructure management" InstallScope="perMachine"  InstallerVersion="300" Compressed="yes"/>

    <!--  MsiNTProductType:  1 Workstation  2 Domain controller  3 Server      -->
    <!--  VersionNT:         https://msdn.microsoft.com/library/aa370556.aspx  -->
    <Condition Message="Installation requires Windows XP, Windows Server 2008, or higher. (found MsiNTProductType [MsiNTProductType], VersionNT [VersionNT])">
      Installed
      or MsiNTProductType = 1 and  VersionNT >= 501
      or MsiNTProductType = 3 and  VersionNT >= 600
    </Condition>

    <!-- Salt properties                                  -->
    <Property Id="MASTER_HOSTNAME"          Value="salt"                 />
    <Property Id="MINION_HOSTNAME"          Value="kingbob"              /> <!-- $(env.COMPUTERNAME) is the name of the building machine. Must be set dynamically. Must not be empty.    -->
    <Property Id="KEEP_CONFIG"              Value="1"                    />
    <!-- Windows Installer properties              https://msdn.microsoft.com/en-us/library/windows/desktop/aa370905(v=vs.85).aspx -->
    <Property Id="ARPHELPLINK"              Value="https://saltstack.com/support/"                                                  />
    <Property Id="ARPURLINFOABOUT"          Value="https://saltstack.com/community/"                                                />
    <Property Id="ARPURLUPDATEINFO"         Value="https://docs.saltstack.com/en/latest/topics/releases/"                           />
    <Property Id="ROOTDRIVE"                Value="C:"                   />   <!-- Will become a TODO once path not fixed c:\salt  -->
    <Property Id="ARPPRODUCTICON"           Value="icon"                 />
    <Property Id="MSIRESTARTMANAGERCONTROL" Value="Disable"              />
    <Property Id="MsiLogging"               Value="v"                    />  <!--  Logging into %TEMP%\MSIxxxxx.LOG  https://msdn.microsoft.com/en-us/library/windows/desktop/aa370322.aspx -->
    <!-- WiX properties                                                 -->
    <Property Id="WIXUI_INSTALLDIR"         Value="INSTALLFOLDER"        /> <!-- Note that this is the name of the property, not its value -->

    <!-- 
      NICE-TO-HAVE   Detect VCRedist
      ProductCode (useless)  https://blogs.msdn.microsoft.com/astebner/2009/01/29/mailbag-how-to-detect-the-presence-of-the-visual-c-9-0-runtime-redistributable-package/
      UpgradeCode            http://mdb-blog.blogspot.de/2010/11/bootstrapper-package-detect-vcredist.html
    -->
    <Upgrade Id="AA783A14-A7A3-3D33-95F0-9A351D530011"><UpgradeVersion Property="DETECTED_VCR_2008SP1_64" Minimum="0.0.0.0" OnlyDetect="yes"/></Upgrade>
    <!-- 
    DETECTED_VCR_2008SP1_64 == '{1F1C2DFC-2D24-3E06-BCB8-725134ADF989};{4B6C7001-C7D6-3710-913E-5BC23FCE91E6}' 
    The property contains a list of ProductCodes that have the same UpgradeCode
    So this is more complicated and more limited than show-software.exe u 2008
    because I need to get the UpgradeCode (how?)
    Microsoft Visual C++ 2008 Redistributable - x64 9.0.30729.4148  64      MsiExec.exe /X{4B6C7001-C7D6-3710-913E-5BC23FCE91E6}
    Microsoft Visual C++ 2008 Redistributable       9.0.30729.4148  32      MsiExec.exe /X{1F1C2DFC-2D24-3E06-BCB8-725134ADF989}    
    Microsoft Visual C++ 2008 Redistributable - x64 9.0.30729.6161  64      MsiExec.exe /X{5FCE6D76-F5DC-37AB-B2B8-22AB8CEDB1D4}
    Microsoft Visual C++ 2008 Redistributable - x86 9.0.30729.6161  32      MsiExec.exe /X{9BE518E6-ECC6-35A9-88E4-87755C07200F}
    -->

    <!-- Sequence is determined by the Before attribute -->
    <!-- Installation sequence with GUI   -->
    <InstallUISequence>
      <Custom Action="IMCA_SetMinionHostname"     Before='IMCA_read_NSIS'     >NOT Installed</Custom>
      <Custom Action='IMCA_read_NSIS'             Before='FindRelatedProducts'>NOT Installed</Custom>
      <Custom Action="IMCA_WarnLittleRAM"         After='CostFinalize'        >NOT Installed</Custom>

      <LaunchConditions After="AppSearch" /> <!-- Benefit is unclear. Was used when detecting MFC. Probably not needed. -->
    </InstallUISequence>

    <!-- Installation sequence without GUI, silent, headless   -->
    <InstallExecuteSequence>
      <Custom Action="IMCA_SetMinionHostname"     Before='IMCA_read_NSIS'        >NOT Installed</Custom>
      <Custom Action='IMCA_read_NSIS'             Before='FindRelatedProducts'   >NOT Installed</Custom>
      <!-- DECA_del_NSIS is a in-script custom action.  It must be sequenced in between the InstallInitialize action and the InstallFinalize action in the InstallExecuteSequence table  -->
      <Custom Action='DECA_del_NSIS'              After='InstallInitialize'      >NOT Installed</Custom>

      <Custom Action='CADH_WriteConfig'           Before='DECA_WriteConfig'      >NOT Installed</Custom> 
      <Custom Action='DECA_WriteConfig'           Before='StartServices'         >NOT Installed</Custom>
      
      <!-- Conditionally start the service -->
      <StartServices Sequence="5900">START_MINION_SERVICE = "1"</StartServices>

      <!-- 
      Remove 'lifetime' data on uninstall or upgrade.
      On custom action conditions:
        http://resources.flexerasoftware.com/web/pdf/archive/IS-CHS-Common-MSI-Conditions.pdf
      On the upgrade custom action condition:
        UPGRADINGPRODUCTCODE | does not work
        Not Installed        | this installer is not installed
        
      On DECA_Upgrade and the CleanupVarFolder component
        DECA_Upgrade removes bin/**/*.pyc files.  CleanupVarFolder does this already. 
        TODO rethink this.
      -->
      <Custom Action='CADH_UninstallKeepConfig0'   Before='DECA_UninstallKeepConfig0' >(REMOVE ~= "ALL") AND (KEEP_CONFIG = "0")</Custom>
      <Custom Action='DECA_UninstallKeepConfig0'           After='RemoveFiles'        >(REMOVE ~= "ALL") AND (KEEP_CONFIG = "0")</Custom>
      <Custom Action='CADH_UninstallKeepConfig1'   Before='DECA_UninstallKeepConfig1' >(REMOVE ~= "ALL") AND (KEEP_CONFIG = "1")</Custom>
      <Custom Action='DECA_UninstallKeepConfig1'           After='RemoveFiles'        >(REMOVE ~= "ALL") AND (KEEP_CONFIG = "1")</Custom>
      <Custom Action='CADH_Upgrade'                Before='DECA_Upgrade'              >NOT Installed</Custom>
      <Custom Action='DECA_Upgrade'                        After='RemoveFiles'        >NOT Installed</Custom>
    </InstallExecuteSequence>

    <!-- http://wixtoolset.org/documentation/manual/v3/howtos/updates/major_upgrade.html -->
    <MajorUpgrade DowngradeErrorMessage="A newer version of [ProductName] is already installed." />

    <!-- Delete a folder recursivly -->
    <!-- Inspiration 1: https://www.hass.de/content/wix-how-use-removefolderex-your-xml-scripts -->
    <!-- Inspiration 2: http://robmensching.com/blog/posts/2010/5/2/the-wix-toolsets-remember-property-pattern/   Simple Remember Pattern SRP-->
    <!-- Learn: Condition with KEEP_CONFIG is useless on Components and on Features -->
    <!-- SRP pattern 1/2 -->
    <!--     SRP: the Property that we'll remember  -->
    <Property Id="BINFOLDER">
      <!--   SRP:  the registry search that will reload our Property on repair, upgrade and uninstall -->
      <RegistrySearch  Root="HKLM" Key="SOFTWARE\Saltstack\Salt Minion" Name="BinPath" Type="raw"  Id="BINFOLDER_REGSEARCH" />
    </Property>

    <DirectoryRef Id="BINFOLDER">
      <Component Id="CleanupBinFolder" Guid="*">
        <!--   SRP: the registry key that remembers our DIR and RemoveFolderEx must read from registry. -->
        <RegistryValue Root="HKLM" Key="SOFTWARE\Saltstack\Salt Minion" Name="BinPath" Type="string" Value="[BINFOLDER]" KeyPath="yes" /> <util:RemoveFolderEx On="uninstall" Property="BINFOLDER" />
      </Component>
    </DirectoryRef>

    <!-- SRP pattern 2/2 -->
    <Property Id="VARFOLDER">
      <RegistrySearch  Root="HKLM" Key="SOFTWARE\Saltstack\Salt Minion" Name="VarPath" Type="raw"  Id="VARFOLDER_REGSEARCH" />
    </Property>

    <DirectoryRef Id="VARFOLDER">
      <Component Id="CleanupVarFolder" Guid="*">
        <RegistryValue Root="HKLM" Key="SOFTWARE\Saltstack\Salt Minion" Name="VarPath" Type="string" Value="[VARFOLDER]" KeyPath="yes" /> <util:RemoveFolderEx On="uninstall" Property="VARFOLDER" />
      </Component>
    </DirectoryRef>

    <DirectoryRef Id="TARGETDIR">
      <!-- Python 2 requires Microsoft Visual C++ 2008 runtime (VC90_CRT)  -->
      <!-- Python 3 requires Microsoft Visual C++ 2015 runtime (VC140_CRT)   https://blogs.msdn.microsoft.com/vcblog/2015/03/03/introducing-the-universal-crt/-->
      <!-- On 64bit Windows, 64bit Python is used, so only the 64bit Runtime is needed.   -->
      <!-- 
         CON   msm:         ICE linter warnings, one 'you must reboot' message
         PRO   local dll:   easy 
      -->
      <Merge Id="MSM_VC90_CRT_64" SourceFile="c:\saltrepo_local_cache\64\Microsoft_VC90_CRT_x86_x64.msm" DiskId="1" Language="0"/>
    </DirectoryRef>

    <Feature Id="ProductFeature" Title="Minion" Level="1">
      <ComponentGroupRef Id="ProductComponents"     />
      <ComponentRef      Id="CleanupBinFolder"      />
      <ComponentRef      Id="CleanupVarFolder"      />
      <Feature Id="VC90_CRT_x86_x64" Title="Visual Studio 2008 CRT 64bit" AllowAdvertise="no" Display="hidden" Level="1"><MergeRef Id="MSM_VC90_CRT_64"/></Feature>
    </Feature>

    <Icon Id="icon" SourceFile="$(var.dist)\..\installer\salt.ico" />
    <WixVariable Id="WixUILicenseRtf" Value="LICENSE.rtf" />

    <!-- Dimensions of images must follow http://wixtoolset.org/documentation/manual/v3/wixui/wixui_customizations.html  -->
    <WixVariable Id="WixUIBannerBmp" Value="imgTop.jpg" />
    <WixVariable Id="WixUIDialogBmp" Value="imgLeft.jpg" />

    <UIRef Id="WixUI_Minion" />                             <!-- // Include WixUI_Minion.wxs in this directory -->
    
    <MediaTemplate EmbedCab="yes" CompressionLevel="low" /> <!-- // Do not create cab files -->
    
  </Product>

  <Fragment>
    <Directory Id="TARGETDIR" Name="SourceDir"> <!-- // Outmost directory must be exactly this. Ramirez ch 1 p 25 -->
      <Directory Id="INSTALLFOLDER" Name="salt" >
        <Directory Id="CONFFOLDER" Name="conf" />
        <!-- Declare bin and var folder for RemoveFolderEX remember pattern -->        
        <Directory Id="BINFOLDER"  Name="bin" />
        <Directory Id="VARFOLDER"  Name="var" />
      </Directory>
    </Directory>

    <!-- populate properties witch localised WixQueryOsWellKnownSID http://wixtoolset.org/documentation/manual/v3/customactions/osinfo.html -->
    <PropertyRef Id="WIX_ACCOUNT_ADMINISTRATORS" />

    <Component Id="InstallfolderPermissions"  Directory="INSTALLFOLDER" Guid="B30E119F-0286-4453-8AB7-C6E916FA2843">
      <CreateFolder> <!-- // like mkdir, the folder will not be created if present. -->
        <!--
          Function win_verify_env()  in  salt/slt/utils/verify.py sets permissions on each start of the salt-minion services.
          The installer must create the folder with the same permissions, so you keep sets of permissions in sync.

          The Permission element(s) below replace any present permissions,
          except NT AUTHORITY\SYSTEM:(OI)(CI)(F), which seems to be the basis.
          Therefore, you don't need to specify User="[WIX_ACCOUNT_LOCALSYSTEM]"  GenericAll="yes"

          Use icacls to test the result:
            C:\>icacls salt
            salt BUILTIN\Administrators:(OI)(CI)(F)
                 NT AUTHORITY\SYSTEM:(OI)(CI)(F)
            ~~ read ~~
            (object inherit)(container inherit)(full access)

            C:\>icacls salt\bin\include
            salt\bin\include BUILTIN\Administrators:(I)(OI)(CI)(F)
                             NT AUTHORITY\SYSTEM:(I)(OI)(CI)(F)
                             w7h64\Markus:(I)(OI)(CI)(F)
            ~~ read ~~
            (permission inherited from parent container)(object inherit)(container inherit)(full access)

          Maybe even the Administrator group full access is "basis", so there is no result of the instruction,
          I leave it for clarity, and potential future use.
          -->
        <Permission User="[WIX_ACCOUNT_ADMINISTRATORS]" GenericAll="yes" TakeOwnership="yes" />
      </CreateFolder>
    </Component>
  </Fragment>
  
  <!-- From the "Default WiX Project Template" -->
  <Fragment>
    <ComponentGroup Id="ProductComponents" Directory="INSTALLFOLDER">
      <ComponentGroupRef Id="dist"    />       <!-- // Include dist-amd64.wxs in this directory -->
      <ComponentGroupRef Id="service" /> 
      <!-- experimental, does not work. Also goto nssm.xsl and remove python.exe
      <ComponentRef Id="servicePython" />
      -->
      <ComponentRef Id="InstallfolderPermissions" />
    </ComponentGroup>
  </Fragment>
</Wix>
