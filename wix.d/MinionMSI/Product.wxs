<?xml version="1.0" encoding="UTF-8"?>
<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi"
xmlns:util="http://schemas.microsoft.com/wix/UtilExtension">

  <Product
      Manufacturer = "SaltStack, Inc."
      Name         = "Salt Minion $(var.DisplayVersion)"
      Version      = "$(var.InternalVersion)"
      UpgradeCode  = "FC6FB3A2-65DE-41A9-AD91-D10A402BD641"
      Id           = "*"
      Language     = "1033">
    <Package InstallScope="perMachine"  InstallerVersion="300" Compressed="yes"/>

    <!-- Conditions for installation -->
    <Condition Message="Installation requires Windows 7/Server 2012. Found MsiNTProductType [MsiNTProductType], VersionNT [VersionNT]">
      Installed
      OR  (MsiNTProductType = 1) AND (VersionNT >= 601)
      OR  (MsiNTProductType = 2) AND (VersionNT >= 602)
      OR  (MsiNTProductType = 3) AND (VersionNT >= 602)
    </Condition>
    <Condition Message="Installation requires 125 MB RAM. Found [PhysicalMemory] MB">Installed OR (PhysicalMemory > 125)</Condition>
    <Condition Message="Installation requires Administrator privileges">             Privileged                         </Condition>

    <Condition Message="Please rename MASTER_HOSTNAME to MASTER"           >Installed OR NOT MASTER_HOSTNAME     </Condition>
    <Condition Message="Please rename MINION_HOSTNAME to MINION_ID"        >Installed OR NOT MINION_HOSTNAME     </Condition>
    <Condition Message="Please rename START_MINION_SERVICE to START_MINION">Installed OR NOT START_MINION_SERVICE</Condition>

    <Condition Message="CONFIG_TYPE must not be '[CONFIG_TYPE]'. Please use 'Existing', 'Custom', 'Default' or 'New'.">
      Installed
      OR (CONFIG_TYPE = "Existing")
      OR (CONFIG_TYPE = "Custom")
      OR (CONFIG_TYPE = "Default")
      OR (CONFIG_TYPE = "New")
    </Condition>
    <Condition Message='START_MINION must not be [START_MINION]. Please use 1 or "" (two double quotes).'>
      (START_MINION = 1) OR NOT START_MINION OR Installed
    </Condition>
    <Condition Message='ZMQ_FILTERING must not be [ZMQ_FILTERING]. Please use 1 or "" (two double quotes).'>
      (ZMQ_FILTERING = 1) OR NOT ZMQ_FILTERING OR Installed
    </Condition>
    <Condition Message='MINION_ID_CACHING must not be [MINION_ID_CACHING]. Please use 1 or "" (two double quotes).'>
      (MINION_ID_CACHING = 1) OR NOT MINION_ID_CACHING OR Installed
    </Condition>
    <Condition Message='KEEP_CONFIG must not be [KEEP_CONFIG]. Please use 1 or "" (two double quotes).'>
      (KEEP_CONFIG = 1) OR NOT KEEP_CONFIG OR Installed
    </Condition>
    <Condition Message='NSIS Salt Minion unexpected uninstall instruction [NSIS_UNINSTALLSTRING]'>
      NOT Installed AND (NSIS_UNINSTALLSTRING >> "uninst.exe" OR NOT NSIS_UNINSTALLSTRING) OR Installed
    </Condition>
    <Condition Message='NSIS Salt Minion unexpected version [NSIS_DISPLAYVERSION]'>
      <![CDATA[NOT Installed AND ((NSIS_DISPLAYVERSION << "v")
                               OR (NSIS_DISPLAYVERSION << "20")
                               OR (NSIS_DISPLAYVERSION << "30") OR NOT NSIS_DISPLAYVERSION) OR Installed]]>
    </Condition>

    <!--
        Properties unset by default:
           MASTER
           MASTER_KEY
           MINION_ID
           MINION_ID_FUNCTION
           MINION_ID_REMOVE_DOMAIN
           MINION_CONFIG
           ZMQ_FILTERING
    -->
    <Property Id="MINION_ID_CACHING"        Value="1"                    />
    <Property Id="MINION_CONFIGFILE"        Value="C:\salt\conf\minion"  />
    <Property Id="CONFIG_TYPE"              Value="Existing"             />
    <Property Id="START_MINION"             Value="1"                    />
    <Property Id="KEEP_CONFIG"              Value="1"                    />
    <Property Id="ARPHELPLINK"              Value="https://saltstack.com/support/"/>
    <Property Id="ARPURLINFOABOUT"          Value="https://saltstack.com/community/"/>
    <Property Id="ARPURLUPDATEINFO"         Value="https://docs.saltstack.com/en/latest/topics/releases/"/>
    <Property Id="ROOTDRIVE"                Value="C:\"/>
    <Property Id="ARPPRODUCTICON"           Value="icon"/>
    <Property Id="MSIRESTARTMANAGERCONTROL" Value="Disable"/>
    <Property Id="MsiLogging"               Value="v"/>
    <Property Id="MSIUSEREALADMINDETECTION" Value="1"/>
    <Property Id="WIXUI_INSTALLDIR"         Value="INSTALLFOLDER"/>

    <!-- Properties of a previous NSIS Salt-minion Are in the 32bit WoW registry -->
    <Property           Id="NSIS_UNINSTALLSTRING">
        <RegistrySearch Id="NSIS_UNINSTALLSTRING"
            Root="HKLM" Key="SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\Salt Minion" Name="UninstallString" Type="raw" Win64="no" />
    </Property>
        <Property       Id="NSIS_DISPLAYVERSION">
        <RegistrySearch Id="NSIS_DISPLAYVERSION"
            Root="HKLM" Key="SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\Salt Minion" Name="DisplayVersion" Type="raw" Win64="no" />
    </Property>

    <!-- Properties for Custom actions  -->
    <CustomAction Id="uninst_NSIS_DECAH"      Property="uninst_NSIS_DECAX"     Value='"[NSIS_UNINSTALLSTRING]" /S'/>
    <CustomAction Id="uninst_NSIS_DECAX"      DllEntry="WixQuietExec"          Execute="deferred" Return="check" BinaryKey="WixCA" Impersonate="no"/>
    <!--  These serve to test the conditions  -->
    <Property     Id="whereexe"                                                Value='C:\Windows\System32\where.exe'/>
    <CustomAction Id="learn_uninst_DECAH"     Property="learn_uninst_DECAX"    Value='"[whereexe]" whoami'/>
    <CustomAction Id="learn_uninst_DECAX"     DllEntry="WixQuietExec"          Execute="deferred" Return="check" BinaryKey="WixCA" Impersonate="no"/>
    <CustomAction Id="learn_old_NSIS_IMCAH"   Property="WixQuietExecCmdLine"   Value='"[whereexe]" whoami'/>
    <CustomAction Id="learn_new_NSIS_IMCAH"   Property="WixQuietExecCmdLine"   Value='"[whereexe]" whoami'/>
    <CustomAction Id="learn_always_IMCAH"     Property="WixQuietExecCmdLine"   Value='"[whereexe]" whoami'/>
    <CustomAction Id="learn_new_NSIS_IMCAX"   DllEntry="WixQuietExec"          Execute="immediate" Return="check" BinaryKey="WixCA"  />
    <CustomAction Id="learn_old_NSIS_IMCAX"   DllEntry="WixQuietExec"          Execute="immediate" Return="check" BinaryKey="WixCA"/>
    <CustomAction Id="learn_always_IMCAX"     DllEntry="WixQuietExec"          Execute="immediate" Return="check" BinaryKey="WixCA"  />


    <InstallUISequence>         <!-- * * * * * * * * * * * * * * * * * * Sequence with GUI * * * * * * * * * * * * * * * * *  -->
      <Custom Action='ReadConfig_IMCAC'            Before='MigrateFeatureStates'    >NOT Installed</Custom>
      <!-- NSIS properties are not set if NSIS is not installed. These IMCAX serves to test the condition-->
      <Custom Action='learn_new_NSIS_IMCAH'        Before='learn_new_NSIS_IMCAX'    />
      <Custom Action='learn_old_NSIS_IMCAH'        Before='learn_old_NSIS_IMCAX'    />
      <Custom Action='learn_always_IMCAH'          Before='learn_always_IMCAX'      />
      <Custom Action="learn_new_NSIS_IMCAX"        Before='MigrateFeatureStates'     >NOT Installed AND (NSIS_UNINSTALLSTRING >> "uninst.exe") AND     (NSIS_DISPLAYVERSION >= "v2017.5")</Custom>
      <Custom Action="learn_old_NSIS_IMCAX"        Before='MigrateFeatureStates'     >NOT Installed AND (NSIS_UNINSTALLSTRING >> "uninst.exe") AND NOT (NSIS_DISPLAYVERSION >= "v2017.5")</Custom>
      <Custom Action="learn_always_IMCAX"          Before='MigrateFeatureStates'    />

      <LaunchConditions After="AppSearch" /> <!-- Benefit is unclear. Was used when detecting MFC. Probably not needed. -->
    </InstallUISequence>

    <InstallExecuteSequence>     <!-- * * * * * * * * * * * * * * * * *  Sequence without GUI (silent, headless)  * * * * * *  -->
    <!--  Unfortunately, uninst.exe /S returns immediately (300 ms) with a successful errorcode 0.
          If a future version of uninst.exe /S will return only after it finished uninstalling,
          the conditions above can replace NSIS_UNINST_EXE_RETURNS_ONLY_AFTER_ITS_WORK . -->
      <Custom Action='ReadConfig_IMCAC'            Before='MigrateFeatureStates'    >NOT Installed</Custom>
      <Custom Action='del_NSIS_DECAC'              After='InstallInitialize'        >NOT Installed AND (NSIS_UNINSTALLSTRING >> "uninst.exe") </Custom>
      <Custom Action="uninst_NSIS_DECAH"           Before='uninst_NSIS_DECAX'      />
      <Custom Action="uninst_NSIS_DECAX"           Before='ProcessComponents'       >NSIS_UNINST_EXE_RETURNS_ONLY_AFTER_ITS_WORK</Custom>
      <Custom Action='learn_uninst_DECAH'          Before='learn_uninst_DECAX'     />
      <Custom Action="learn_uninst_DECAX"          Before='ProcessComponents'       >NOT Installed</Custom>

      <!--  Remove 'lifetime' data on uninstall (and upgrade?) Lifetime data is mainly *.pyc files. -->
      <Custom Action='Uninstall_incl_Config_CADH'
              Before='Uninstall_incl_Config_DECAC'                                      >(REMOVE ~= "ALL") AND (NOT KEEP_CONFIG)</Custom>
      <Custom Action='Uninstall_incl_Config_DECAC' After='RemoveFiles'                  >(REMOVE ~= "ALL") AND (NOT KEEP_CONFIG)</Custom>

      <Custom Action='Uninstall_excl_Config_CADH'
              Before='Uninstall_excl_Config_DECAC'                                      >(REMOVE ~= "ALL") AND (KEEP_CONFIG = "1")</Custom>
      <Custom Action='Uninstall_excl_Config_DECAC' After='RemoveFiles'                  >(REMOVE ~= "ALL") AND (KEEP_CONFIG = "1")</Custom>

      <Custom Action='WriteConfig_CADH'
              Before='WriteConfig_DECAC'                                                >NOT Installed</Custom>
      <Custom Action='WriteConfig_DECAC'           After='InstallFiles'                 >NOT Installed</Custom>

      <!-- Optionally start the service  -->
      <StartServices Sequence="5900"><![CDATA[START_MINION = "1"]]></StartServices>
    </InstallExecuteSequence>   <!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  -->


    <MajorUpgrade DowngradeErrorMessage="A newer version of [ProductName] is already installed." />


    <!--     SRP: the Property that we'll remember  -->
    <Property Id="BINFOLDER">
      <!--   SRP:  the registry search that will reload our Property on repair, upgrade and uninstall -->
      <RegistrySearch  Root="HKLM" Key="SOFTWARE\Saltstack\Salt Minion" Name="BinPath" Type="raw"  Id="BINFOLDER_REGSEARCH" />
    </Property>

    <DirectoryRef Id="BINFOLDER">
      <Component Id="CleanupBinFolder" Guid="*">
        <!--   SRP: the registry key that remembers our DIR and RemoveFolderEx must read from registry. -->
        <RegistryValue Root="HKLM" Key="SOFTWARE\Saltstack\Salt Minion" Name="BinPath" Type="string" Value="[BINFOLDER]" KeyPath="yes" /> <util:RemoveFolderEx On="uninstall" Property="BINFOLDER" />
      </Component>
    </DirectoryRef>


    <DirectoryRef Id="TARGETDIR">
      <Merge Id="MSM_VC90_CRT_64" SourceFile="c:\salt_msi_resources\Microsoft_VC90_CRT_x86_x64.msm" DiskId="1" Language="0"/>
    </DirectoryRef>

    <Feature Id="ProductFeature" Title="Minion" Level="1">
      <ComponentGroupRef Id="ProductComponents" />
      <ComponentRef      Id="CleanupBinFolder" />
      <Feature Id="VC90_CRT_x86_x64" Title="Visual C++ 9 64-bit Runtime" AllowAdvertise="no" Display="hidden" Level="1">
        <MergeRef Id="MSM_VC90_CRT_64"/>
      </Feature>
    </Feature>

    <Icon Id="icon" SourceFile="$(var.dist)\..\installer\salt.ico" />
    <WixVariable Id="WixUILicenseRtf" Value="LICENSE.rtf" />


    <WixVariable Id="WixUIBannerBmp" Value="imgTop.jpg" />
    <WixVariable Id="WixUIDialogBmp" Value="imgLeft.png" />

    <UIRef Id="ProductUI" />                             <!-- Includes ProductUI.wxs in this directory -->

    <MediaTemplate EmbedCab="yes" CompressionLevel="low" /> <!-- Do not create cab files -->
  </Product>


  <Fragment>
    <Directory Id="TARGETDIR" Name="SourceDir"> <!-- Outmost directory must be exactly this. Ramirez ch 1 p 25 -->
      <Directory Id="INSTALLFOLDER" Name="salt" >
        <Directory Id="CONFFOLDER" Name="conf" />
        <!-- Declare bin and var folder for RemoveFolderEX remember pattern -->
        <Directory Id="BINFOLDER"  Name="bin" />
        <Directory Id="VARFOLDER"  Name="var" />
      </Directory>
    </Directory>

    <!-- Set permissions of the install folder with WixQueryOsWellKnownSID -->
    <PropertyRef Id="WIX_ACCOUNT_ADMINISTRATORS" />
    <Component Id="InstallfolderPermissions"  Directory="INSTALLFOLDER" Guid="B30E119F-0286-4453-8AB7-C6E916FA2843">
      <CreateFolder>
        <Permission User="[WIX_ACCOUNT_ADMINISTRATORS]" GenericAll="yes" TakeOwnership="yes" />
      </CreateFolder>
    </Component>
  </Fragment>

  <Fragment>
    <ComponentGroup Id="ProductComponents" Directory="INSTALLFOLDER">
      <ComponentGroupRef Id="dist"    />       <!-- Includes dist-amd64.wxs in this directory -->
      <ComponentGroupRef Id="service" />       <!-- Includes service.wxs in this directory -->
      <ComponentRef Id="InstallfolderPermissions" />
    </ComponentGroup>
  </Fragment>
</Wix>
