<?xml version="1.0" encoding="UTF-8"?>
<!-- see Product.wxs.comments.txt for more comments -->
<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi" 
    xmlns:util="http://schemas.microsoft.com/wix/UtilExtension" 
>
  <!--
      The Product attributes:
        UpgradeCode:
          GUID defining the product across versions. E.g. a previous version is uninstalled during upgrade.
          In other words:
          For update (or upgrade), Windows Installer relies on the UpgradeCode attribute of the Product tag.
          Keep the same UpgradeCode GUID as long as you want the products to be upgraded by the installer.
        Id:
          From https://wixtoolset.org/documentation/manual/v3/xsd/wix/product.html
            The product code GUID for the product. Type: AutogenGuid
          From https://docs.microsoft.com/en-us/windows/win32/msi/product-codes
            The product code is a GUID that is the principal identification of an application or product.
          From https://docs.microsoft.com/en-us/windows/win32/msi/productcode
            This ID must vary for different versions and languages.
          From https://docs.microsoft.com/en-us/windows/win32/msi/changing-the-product-code
            The product code must be changed if any of the following are true for the update:
              - The name of the .msi file has been changed.
          From https://docs.microsoft.com/en-us/windows/win32/msi/major-upgrades
            A major upgrade is a comprehensive update of a product that needs a change of the ProductCode Property.
            A typical major upgrade removes a previous version of an application and installs a new version.
          From old advise:
            A constant Product code  GUID is useful for a subsequent mst (transform).
          To be safe for a major upgrade, the Id (product code GUI) is dynamic/autogenerated: * (star)
  -->
  <Product
      Manufacturer = "SaltStack, Inc."
      Name         = "Salt Minion $(var.DisplayVersion)"
      Version      = "$(var.InternalVersion)"
      UpgradeCode  = "FC6FB3A2-65DE-41A9-AD91-D10A402BD641" 
      Id           = "*"
      Language     = "1033">

    <!-- Windows Installer Version 3.0 = 300 -->
    <Package InstallScope="perMachine"  InstallerVersion="300" Compressed="yes"/>

    <!--
      Block installation based on OS properties
      Properties:
       - MsiNTProductType:  1=Workstation  2=Domain controller  3=Server
       - VersionNT:         https://msdn.microsoft.com/library/aa370556.aspx
       - PhysicalMemory     https://docs.microsoft.com/en-us/windows/desktop/Msi/physicalmemory
      From the how-to http://wixtoolset.org/documentation/manual/v3/howtos/redistributables_and_install_checks/block_install_on_os.html
    -->
    <Condition Message="Installation requires Windows 7/Server 2012. Found MsiNTProductType [MsiNTProductType], VersionNT [VersionNT]">
      <![CDATA[
      Installed 
      or  (MsiNTProductType = 1) and  (VersionNT >= 601)
      or  (MsiNTProductType = 2) and  (VersionNT >= 602)
      or  (MsiNTProductType = 3) and  (VersionNT >= 602)
      ]]>
    </Condition>
    <Condition Message="Installation requires 125 MB RAM. Found [PhysicalMemory] MB">
      <![CDATA[
      Installed or (PhysicalMemory > 125)
      ]]>
    </Condition>
    <Condition Message="Installation requires Administrator privileges">
      <![CDATA[
      Privileged
      ]]>
    </Condition>
    <!-- Renamed properties
         Message when a user sets the old properties
      -->
    <Condition Message="Please rename MASTER_HOSTNAME to MASTER"           ><![CDATA[NOT MASTER_HOSTNAME]]></Condition>
    <Condition Message="Please rename MINION_HOSTNAME to MINION_ID"        ><![CDATA[NOT MINION_HOSTNAME]]></Condition>
    <Condition Message="Please rename START_MINION_SERVICE to START_MINION"><![CDATA[NOT START_MINION_SERVICE]]></Condition>
    <!--
      msi properties
        Naming converntions:   https://docs.microsoft.com/en-us/windows/win32/msi/restrictions-on-property-names
        Public properties be changed by user, e.g. at the command line.
        A value "#" is our convention for "unset"

        On START_MINION and checkbox:
        A checkbox is only empty if a property is undefined (missing).
        You delete a property with "" on the commandline
        When you say START_MINION="" on the commandline, the service will not start and the checkbox will empty.
        When you say START_MINION=0 on the commandline, the service will not start, but the checkbox will be set.
        When you say START_MINION=0 /qn on the commandline (no GUI), the service will not start.
     -->
    <!-- Salt properties  -->
    <Property Id="MASTER"                   Value="#"                    />
    <Property Id="ZMQ_FILTERING"            Value="False"                /> <!-- or True  -->
    <Property Id="MASTER_KEY"               Value="#"                    />
    <Property Id="MINION_ID"                Value="#"                    />
    <Property Id="MINION_CONFIGFILE"        Value="C:\salt\conf\minion"  />
    <Property Id="CONFIG_TYPE"              Value="Existing"             /> <!-- or Custom or Default    WIP  -->
    <Property Id="START_MINION"             Value="1"                    />
    <Property Id="KEEP_CONFIG"              Value="1"                    />


    <!-- Windows Installer properties              https://msdn.microsoft.com/en-us/library/windows/desktop/aa370905(v=vs.85).aspx -->
    <Property Id="ARPHELPLINK"              Value="https://saltstack.com/support/"                                                  />
    <Property Id="ARPURLINFOABOUT"          Value="https://saltstack.com/community/"                                                />
    <Property Id="ARPURLUPDATEINFO"         Value="https://docs.saltstack.com/en/latest/topics/releases/"                           />
    <Property Id="ROOTDRIVE"                Value="C:\"                  />   <!-- Will become a TODO once path not fixed c:\salt  -->
    <Property Id="ARPPRODUCTICON"           Value="icon"                 />
    <Property Id="MSIRESTARTMANAGERCONTROL" Value="Disable"              />
    <Property Id="MsiLogging"               Value="v"                    />  <!--  Logging into %TEMP%\MSIxxxxx.LOG  https://msdn.microsoft.com/en-us/library/windows/desktop/aa370322.aspx -->
    <Property Id="MSIUSEREALADMINDETECTION" Value="1" />

    <!-- WiX properties
      WIXUI_INSTALLDIR
        From https://wixtoolset.org//documentation/manual/v3/wixui/dialog_reference/wixui_installdir.html
          Selecting a user interface
       http://www.dizzymonkeydesign.com/blog/misc/adding-and-customizing-dlgs-in-wix-3/
     -->
    <Property Id="WIXUI_INSTALLDIR"         Value="INSTALLFOLDER"        /> <!-- Note that this is the name of the property, not its value -->


    <!-- Sequence is determined by the Before attribute -->
    <!-- Installation sequence with GUI   -->
    <InstallUISequence>
      <Custom Action='ReadConfig_IMCAC'            Before='SetMinionIdToHostname_IMCAX' >NOT Installed</Custom>
      <!-- set MINION_ID if not read from NSIS/kept_config and user did not set it and software not installed -->
      <Custom Action="SetMinionIdToHostname_IMCAX" Before='MigrateFeatureStates'        >NOT Installed AND (MINION_ID = "#")</Custom>

      <LaunchConditions After="AppSearch" /> <!-- Benefit is unclear. Was used when detecting MFC. Probably not needed. -->
    </InstallUISequence>

    <!-- Installation sequence without GUI, silent, headless   -->
    <InstallExecuteSequence>
      <Custom Action='ReadConfig_IMCAC'            Before='SetMinionIdToHostname_IMCAX' >NOT Installed</Custom>
      <!-- set MINION_ID if not read from NSIS/kept_config and user did not set it and software not installed -->
      <Custom Action="SetMinionIdToHostname_IMCAX" Before='MigrateFeatureStates'        >NOT Installed AND (MINION_ID = "#")</Custom>

      <!-- del_NSIS_DECAC is a in-script custom action.  It must be sequenced in between the InstallInitialize action and the InstallFinalize action in the InstallExecuteSequence table  -->
      <Custom Action='del_NSIS_DECAC'              After='InstallInitialize'            >NOT Installed</Custom>
      <Custom Action='WriteConfig_CADH'            Before='WriteConfig_DECAC'            >NOT Installed</Custom> 
      <Custom Action='WriteConfig_DECAC'           Before='StartServices'               >NOT Installed</Custom>
      
      <!-- Conditionally start the service  
      Programmer reminder/warning: leave CDATA!
      -->
      <StartServices Sequence="5900"><![CDATA[START_MINION = "1"]]></StartServices>

      <!-- 
      Remove 'lifetime' data on uninstall or upgrade.
      Lifetime data is mainly *.pyc files.

      On custom action conditions:
        http://resources.flexerasoftware.com/web/pdf/archive/IS-CHS-Common-MSI-Conditions.pdf
      On the upgrade custom action condition:
        UPGRADINGPRODUCTCODE | does not work
        Not Installed        | this installer is not installed
        
      On Upgrade_DECAC and the CleanupBinFolder component:
        Upgrade_DECAC removes bin/**/*.pyc files.  CleanupBinFolder does this already. 
        TODO rethink this.


      From  https://docs.microsoft.com/en-us/windows/win32/msi/property-reference
        Installed
          The Installed property is set only if the product is installed per-machine or for the current user

      From "Standard actions" https://docs.microsoft.com/en-us/windows/win32/msi/standard-actions-reference
          RemoveFiles            https://docs.microsoft.com/en-us/windows/win32/msi/removefiles-action
          RemoveExistingProducts https://docs.microsoft.com/en-us/windows/win32/msi/removeexistingproducts-action
      -->
      <Custom Action='Uninstall_incl_Config_CADH'   Before='Uninstall_incl_Config_DECAC' >(REMOVE ~= "ALL") AND (KEEP_CONFIG = "0")</Custom>
      <Custom Action='Uninstall_incl_Config_DECAC'           After='RemoveFiles'         >(REMOVE ~= "ALL") AND (KEEP_CONFIG = "0")</Custom>
      <Custom Action='Uninstall_excl_Config_CADH'   Before='Uninstall_excl_Config_DECAC' >(REMOVE ~= "ALL") AND (KEEP_CONFIG = "1")</Custom>
      <Custom Action='Uninstall_excl_Config_DECAC'           After='RemoveFiles'         >(REMOVE ~= "ALL") AND (KEEP_CONFIG = "1")</Custom>
      <Custom Action='Upgrade_CADH'                 Before='Upgrade_DECAC'               >NOT Installed</Custom>
      <Custom Action='Upgrade_DECAC'                         After='RemoveFiles'         >NOT Installed</Custom>
    </InstallExecuteSequence>

    <!-- http://wixtoolset.org/documentation/manual/v3/howtos/updates/major_upgrade.html -->
    <MajorUpgrade DowngradeErrorMessage="A newer version of [ProductName] is already installed." />

    <!-- Delete a folder recursivly -->
    <!-- Inspiration 1: https://www.hass.de/content/wix-how-use-removefolderex-your-xml-scripts -->
    <!-- Inspiration 2: http://robmensching.com/blog/posts/2010/5/2/the-wix-toolsets-remember-property-pattern/   Simple Remember Pattern SRP-->
    <!-- Learn: Condition with KEEP_CONFIG is useless on Components and on Features -->
    <!-- SRP pattern
       We cannot recursivly delete the var folder because it contains the cache, we regard as configuration and optionally keep.
         It is the task of Uninstall_excl_Config_DECAC to selectivly delete the var folder
        The use of the SRP Pattern is limited.
    -->

    <!--     SRP: the Property that we'll remember  -->
    <Property Id="BINFOLDER">
      <!--   SRP:  the registry search that will reload our Property on repair, upgrade and uninstall -->
      <RegistrySearch  Root="HKLM" Key="SOFTWARE\Saltstack\Salt Minion" Name="BinPath" Type="raw"  Id="BINFOLDER_REGSEARCH" />
    </Property>

    <DirectoryRef Id="BINFOLDER">
      <Component Id="CleanupBinFolder" Guid="*">
        <!--   SRP: the registry key that remembers our DIR and RemoveFolderEx must read from registry. -->
        <RegistryValue Root="HKLM" Key="SOFTWARE\Saltstack\Salt Minion" Name="BinPath" Type="string" Value="[BINFOLDER]" KeyPath="yes" /> <util:RemoveFolderEx On="uninstall" Property="BINFOLDER" />
      </Component>
    </DirectoryRef>


    <DirectoryRef Id="TARGETDIR">
      <!-- 
      Quote from https://wiki.python.org/moin/WindowsCompilers
        Even though Python is an interpreted language, you may need to install Windows C++ compilers in some cases.
        For example, you will need to use them if you wish to:
         - Install a non-pure Python package from sources with Pip (if there is no Wheel package provided).
         - Compile a Cython or Pyrex file.

      Explicit list of cases which need the C++ runtime:
        - TODO/unknown

      Microsoft provides official C++ compilers called Visual C++, you can find them bundled with Visual Studio.

      Which Microsoft Visual C++ compiler to use with a specific Python version?
      Python     | VC++        | Visual Studio
        2.7      | VC90_CRT    | 2008
        3.5-8    | VC140_CRT   | 2015

      The msi incorporates the VC*_CRT as merge modules (*.msm), following the how-to:
        https://wixtoolset.org/documentation/manual/v3/howtos/redistributables_and_install_checks/install_vcredist.html
      -->
      <Merge Id="MSM_VC90_CRT_64" SourceFile="c:\salt_msi_resources\Microsoft_VC90_CRT_x86_x64.msm" DiskId="1" Language="0"/>
    </DirectoryRef>

    <Feature Id="ProductFeature" Title="Minion" Level="1">
      <ComponentGroupRef Id="ProductComponents" />
      <ComponentRef      Id="CleanupBinFolder" />
      <Feature Id="VC90_CRT_x86_x64" Title="Visual C++ 9 64-bit Runtime" AllowAdvertise="no" Display="hidden" Level="1">
        <MergeRef Id="MSM_VC90_CRT_64"/>
      </Feature>
    </Feature>

    <Icon Id="icon" SourceFile="$(var.dist)\..\installer\salt.ico" />
    <WixVariable Id="WixUILicenseRtf" Value="LICENSE.rtf" />

    <!-- Dimensions of images must follow http://wixtoolset.org/documentation/manual/v3/wixui/wixui_customizations.html  -->
    <WixVariable Id="WixUIBannerBmp" Value="imgTop.jpg" />
    <WixVariable Id="WixUIDialogBmp" Value="imgLeft.jpg" />

    <UIRef Id="WixUI_Minion" />                             <!-- Include WixUI_Minion.wxs in this directory -->
    
    <MediaTemplate EmbedCab="yes" CompressionLevel="low" /> <!-- Do not create cab files -->
    
  </Product>

  <Fragment>
    <Directory Id="TARGETDIR" Name="SourceDir"> <!-- Outmost directory must be exactly this. Ramirez ch 1 p 25 -->
      <Directory Id="INSTALLFOLDER" Name="salt" >
        <Directory Id="CONFFOLDER" Name="conf" />
        <!-- Declare bin and var folder for RemoveFolderEX remember pattern -->        
        <Directory Id="BINFOLDER"  Name="bin" />
        <Directory Id="VARFOLDER"  Name="var" />
      </Directory>
    </Directory>

    <!-- populate properties witch localised WixQueryOsWellKnownSID http://wixtoolset.org/documentation/manual/v3/customactions/osinfo.html -->
    <PropertyRef Id="WIX_ACCOUNT_ADMINISTRATORS" />

    <Component Id="InstallfolderPermissions"  Directory="INSTALLFOLDER" Guid="B30E119F-0286-4453-8AB7-C6E916FA2843">
      <CreateFolder> <!-- like mkdir, the folder will not be created if present. -->
        <!--
          Function win_verify_env()  in  salt/slt/utils/verify.py sets permissions on each start of the salt-minion services.
          The installer must create the folder with the same permissions, so you keep sets of permissions in sync.

          The Permission element(s) below replace any present permissions,
          except NT AUTHORITY\SYSTEM:(OI)(CI)(F), which seems to be the basis.
          Therefore, you don't need to specify User="[WIX_ACCOUNT_LOCALSYSTEM]"  GenericAll="yes"

          Use icacls to test the result:
            C:\>icacls salt
            salt BUILTIN\Administrators:(OI)(CI)(F)
                 NT AUTHORITY\SYSTEM:(OI)(CI)(F)
            ~~ read ~~
            (object inherit)(container inherit)(full access)

            C:\>icacls salt\bin\include
            salt\bin\include BUILTIN\Administrators:(I)(OI)(CI)(F)
                             NT AUTHORITY\SYSTEM:(I)(OI)(CI)(F)
                             w7h64\Markus:(I)(OI)(CI)(F)
            ~~ read ~~
            (permission inherited from parent container)(object inherit)(container inherit)(full access)

          Maybe even the Administrator group full access is "basis", so there is no result of the instruction,
          I leave it for clarity, and potential future use.
          -->
        <Permission User="[WIX_ACCOUNT_ADMINISTRATORS]" GenericAll="yes" TakeOwnership="yes" />
      </CreateFolder>
    </Component>
  </Fragment>
  
  <!-- From the "Default WiX Project Template" -->
  <Fragment>
    <ComponentGroup Id="ProductComponents" Directory="INSTALLFOLDER">
      <ComponentGroupRef Id="dist"    />       <!-- Include dist-amd64.wxs in this directory -->
      <ComponentGroupRef Id="service" /> 
      <!-- experimental, does not (yet) work.
           Intended to replace nssm (ssm) with the Windows method of starting a service.
           Maybe, nssm (ssm) cannot be replaced, because it indefineiy starts the salt-minion python exe over and over again,
           whereas the Windows method only starts an exe only a limited time and then stops.
           Also goto BuildDistFragment.xsl and remove python.exe
      <ComponentRef Id="servicePython" />
      -->
      <ComponentRef Id="InstallfolderPermissions" />
    </ComponentGroup>
  </Fragment>
</Wix>
