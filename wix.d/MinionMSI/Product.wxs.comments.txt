 * * * * * * * * * * 
 * * * * * * * * * * 
   merge module snippet
   snippeted because visual c++ 2008 merge modules are out of date, using the dll instead.
 * * * * * * * * * * 
 * * * * * * * * * * 

    <!-- 
    Merge modules (*.msm) are msi 'library' databases that can be included ('merged') into a (single) msi databases.
    -->
    <DirectoryRef Id="TARGETDIR">
      <Merge Id="MSM_+++" SourceFile="+++++.msm" DiskId="1" Language="0"/>
    </DirectoryRef>
 
 
    <!-- 
      The merge module is only included ('level 1' 'feature') on Windows Server 2008
    -->
      <Feature Id="VC90_+++" Title="++++" AllowAdvertise="no" Display="hidden" Level="0">
        <MergeRef Id="MSM_++++"/>
        <Condition Level="1">MsiNTProductType = 3 and  VersionNT >= 600</Condition>
      </Feature>

 


 * * * * * * * * * * 
 * * * * * * * * * * 
ISSUE  TARGETDIR is set to e: 
https://github.com/markuskramerIgitt/salt-windows-msi/issues/8
 * * * * * * * * * * 
 * * * * * * * * * * 
		 
	   From     http://badecho.com/2008/12/the-root-of-the-problem/
		  If you don’t define and set ROOTDRIVE in the property table of your installer database,
		  then the tool installing the product has to set the property.
		  How does it determine which drive to assign to ROOTDRIVE?
		  It simply looks at all available hard drives, and chooses the one with the most free space.

	   Solution: (from badecho)
	     Setting ROOTDRIVE to SystemDrive

			 

 * * * * * * * * * * 
 * * * * * * * * * * 
 Nice: The property has a default value, if there is no ini file.
 * * * * * * * * * * 
 * * * * * * * * * * 
 Ugly: reading the file for each property.	
 
    <Property Id="MASTER" Value="salt">
      <IniFileSearch Id="IniFileSearchID1" Name="SaltstackMinionConfigBackup.ini" Section="Backup" Key="master" Type="raw" />
    </Property>

    <Property Id="MINION_ID"          Value="$(env.COMPUTERNAME)">
      <IniFileSearch Id="IniFileSearchID2" Name="SaltstackMinionConfigBackup.ini" Section="Backup" Key="id" Type="raw" />
    </Property>

		
		
 * * * * * * * * * * 
 * * * * * * * * * * 
LEARN dont write an ini file.		
 * * * * * * * * * * 
 * * * * * * * * * *  

		We need a custom action to manipulate a previous NSIS installation.
		This custom action must start before any file operation.
		Catch: the manipulation will essentially uninstall NSIS, but leave the configuration.
		If the installer than fails, this is a catch.

		Attempt 1: FAIL
		  Before='InstallFiles' in InstallExecuteSequence is already too late.

		Attempt 2:
		 Before='LaunchConditions' in 4 sequences.
		 The custom action is named IMCA_PeelNSIS
		 From     http://stackoverflow.com/questions/11668875/execute-a-custom-action-before-product-condition
		   The LaunchConditions action is scheduled to run in both InstallUISequence and InstallExecuteSequence.
		   You must specify such a custom action in both sequences.
		   You should define it with Execute='firstSequence' attribute - this way it will run only the first sequence it is met in.
		 It is defined in wix/MinionMSI/MinionConfigurationExtensionCA.wxs
		 It is coded   in wix/MinionConfigurationExtension/MinionConfiguration.cs

		 From  http://wixtoolset.org/documentation/manual/v3/xsd/wix/launchconditions.html
		   Found two more parent sequences. I add all of them.

		In a /l*v log file, IMCA_PeelNSIS is around line 132, only after actions INSTALL and FindRelatedProducts.
		I have the impression, this is early enough.

		Attempt 3: FAIL
		Are these alternatives?
		  wixtoolset.org/documentation/manual/v3/xsd/wix/findrelatedproducts.html    | no because it only modifies the UpgradeTable.
		  wixtoolset.org/documentation/manual/v3/xsd/wix/migratefeaturestates.html   | no because NSIS has no feature states
		  wixtoolset.org/documentation/manual/v3/xsd/wix/removeexistingproducts.html | no because we must not uninstall NSIS, just peel it.

		Note 1:
		 LaunchConditions seems only to terminate the installer.
     
     2016-11-29  mkr problem: 
        Custom Action='IMCA_PeelNSIS' Before='LaunchConditions' 
     log file sequence:
        Doing action: AppSearch
        AppSearch: Property: MASTER, Signature: IniFileSearchID1
        Doing action: IMCA_PeelNSIS
     so it is too late to write NSIS variables into an ini file, because the ini file is already read.
     Same with before AppSearch.
     Out of options.
     hard to understand:      http://robmensching.com/blog/posts/2010/5/2/the-wix-toolsets-remember-property-pattern/
     read  http://stackoverflow.com/questions/3449770/how-do-i-read-app-config-values-and-set-properties-in-wix
     read  http://stackoverflow.com/questions/23805767/wix-custom-actions-reading-parameters-from-an-xml-file
     
     using session["MASTER"] = value; 
     I (wrongly?) remmembered that I cannot access CA Parameter in immediate actions.
     So I can delete the attempt to write to the ini file.		
		

 * * * * * * * * * * 
 * * * * * * * * * * 
  Trying to not NUKE CONF
 * * * * * * * * * * 
 * * * * * * * * * * 
		A component or a feature can only be uninstalled after it has been installed.
		Optionally removing CONF means, if not, the component remains, the uninstall is uncomplete, the ARP entry remains, a second uninstall removes the ARP.
		I looked for 3 days for a WiX way, not CS_CUSTOM_ACTION
		  
		
		
		      <!-- ComponentRef      Id="C.RemoveDataFolder"    / -->
      <!--  http://stackoverflow.com/questions/14645401/msi-uninstall-does-not-remove-product-entry-in-program-features 
      <Feature Id='CleanupConfFolderFeature' Level='0'>
        <Condition Level="1">((NOT Installed) OR (REMOVE ~= "ALL")) AND (KEEP_CONFIG = "0")</Condition>			
        <ComponentRef Id="CleanupConfFolder"  /> 
      </Feature>
      -->
		    <!-- SRP: xxxxxxxxxxxxxxxx
    <DirectoryRef Id="CONFFOLDER">
      <Component Id="CleanupConfFolder" Guid="*">
        <RegistryValue Root="HKLM" Key="SOFTWARE\Saltstack\Salt Minion" Name="ConfPath" Type="string" Value="[CONFFOLDER]" KeyPath="yes" /> <util:RemoveFolderEx On="uninstall" Property="CONFFOLDER" />
      </Component>
    </DirectoryRef>
    <Property Id="CONFFOLDER">
      <RegistrySearch  Root="HKLM" Key="SOFTWARE\Saltstack\Salt Minion" Name="ConfPath" Type="raw"  Id="CONFFOLDER_REGSEARCH" />
    </Property>
    -->
		
		
		    <!--SOLUTION NOT NEIL BEGIN             http://stackoverflow.com/questions/8258009/wix-condition-on-property-not-working 
    http://stackoverflow.com/questions/31306509/wix-set-property-from-registry-during-uninstall -->
    

    <Property Id="CONFFOLDER" Secure="yes">
      <RegistrySearch  Root="HKLM" Key="SOFTWARE\Saltstack\Salt Minion" Name="ConfPath" Type="raw"  Id="CONFFOLDER_REGSEARCH" />
    </Property>

    <CustomAction Id="CA.SetDataFolder" Property="P.REMOVEDATAFOLDER" Value='[CONFFOLDER]'  Execute='immediate' />
    

    <DirectoryRef Id="CONFFOLDER">
      <Component  t Id="C.RemoveDataFolder" Guid="18b9737f-bd95-47f5-9fd2-1946c187c505" KeyPath="yes"> <!-- https://www.guidgen.com/ -->
        <util:RemoveFolderEx On="uninstall" Property="P.REMOVEDATAFOLDER" />
      </Component>
    </DirectoryRef>


    <InstallExecuteSequence>
      <Custom Action="CA.SetDataFolder" After="AppSearch" >CONFFOLDER</Custom>
      <Custom Action="C.RemoveDataFolder" After="InstallInitialize" >KEEP_CONFIG = "0"</Custom>
    </InstallExecuteSequence>
    <!--SOLUTION NEIL END-->
		
		