<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!--
    ================================================================================
      Note: $(Platform) is the PROJECT platform, not the SOLUTION platform. If
            building in Visual Studio, this won't detect amd64 unless your build
            configuration sets the x64 platform for MinionMSI and MinionEXE, or
            you set TargetPlatform as a project variable in Visual Studio somewhere.
    ================================================================================
  -->
  <PropertyGroup>
    <TargetPlatform Condition="'$(TargetPlatform)'=='' AND '$(Platform)'=='x86'">win32</TargetPlatform>
    <TargetPlatform Condition="'$(TargetPlatform)'=='' AND '$(Platform)'=='x64'">amd64</TargetPlatform>
    <BuildEnv Condition="'$(BuildEnv)'==''">$([System.IO.Path]::GetFullPath('$(MSBuildProjectDirectory)\..\..\..\salt\pkg\windows\buildenv'))</BuildEnv>
    <DefineConstants>$(DefineConstants);dist=$(BuildEnv);TargetPlatform=$(TargetPlatform)</DefineConstants>
    <BUILD_NUMBER Condition="'$(BUILD_NUMBER)'==''">0</BUILD_NUMBER>
  </PropertyGroup>

  <!--
    ================================================================================
       setVersionProperties

         Locates the distribution zip file and builds the DisplayVersion and
         InternalVersion variables based on the name.

         This target rewrites the output TargetName with the discovered version
         information.
    ================================================================================
  -->
  <Target Name="setVersionProperties">

    <Error Condition="'$(DisplayVersion)'==''"  Text="Must set DisplayVersion" />
    <Error Condition="'$(InternalVersion)'==''" Text="Must set InternalVersion" />

    <!-- DO NOT CALCULATE         REQUIRE DisplayVersion And InternalVersion    DUMP Version?
    <PropertyGroup>
      <DisplayVersion Condition="'$(DisplayVersion)'=='' And '$(Version)'!=''">$(Version)</DisplayVersion>
      <YearPosition>$(DisplayVersion.IndexOf('2'))</YearPosition> 
      <DashPosition>$(DisplayVersion.IndexOf('-'))</DashPosition>
      <InternalVersionStartIndex>$([MSBuild]::Add($(YearPosition),2))</InternalVersionStartIndex>
      <InternalVersionCalculatedLength Condition="$(DashPosition)&gt;0">$([MSBuild]::Subtract($(DashPosition),$(InternalVersionStartIndex)))</InternalVersionCalculatedLength>
      <CalculatedInternalVersion Condition="$(DashPosition)&gt;0">$(DisplayVersion.SubString($(InternalVersionStartIndex),$(InternalVersionCalculatedLength)))</CalculatedInternalVersion>
      <CalculatedInternalVersion Condition="$(DashPosition)&lt;=0">$(DisplayVersion.SubString($(InternalVersionStartIndex)))</CalculatedInternalVersion>
      <InternalVersion Condition="'$(InternalVersion)'==''">$(CalculatedInternalVersion)</InternalVersion>
      <InternalVersion Condition="'$(BUILD_NUMBER)'!=''">$(InternalVersion).$(BUILD_NUMBER)</InternalVersion>
    </PropertyGroup>
    -->
    
    <Message Text="******************************************************************************   "/>
    <Message Text="****************** common/targets/Minion.Common.targets **********************   "/>    
    <Message Text="        DisplayVersion  = $(DisplayVersion)"/>
    <Message Text="        InternalVersion = $(InternalVersion)"/>
    <Message Text="        Version         = $(Version)"/>    
    <Message Text="******************************************************************************   "/>
    
    <PropertyGroup>
      <DefineConstants>$(DefineConstants);DisplayVersion=$(DisplayVersion);InternalVersion=$(InternalVersion)</DefineConstants>
      <TargetName>Salt-Minion-$(DisplayVersion)-$(TargetPlatform)-Setup</TargetName>
    </PropertyGroup>
  </Target>

  <!--
    ================================================================================
       DistContent

         Build the list of files in $(BuildEnv). This runs every time as the output
         is necessary for other targets.

         [OUT]
         @(DistContent) - an ITaskItem[] containing all the extracted dist files.
    ================================================================================
  -->
  <Target Name="DistContent" DependsOnTargets="setVersionProperties" Outputs="@(DistContent)">
    <Message Text="Looking for distribution content in $([System.IO.Path]::GetFullPath('$(BuildEnv)'))"/>
    <ItemGroup>
      <DistContent Include="$(BuildEnv)\**\*.*" />
    </ItemGroup>
  </Target>

</Project>
