<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="12.0">

  <!--
    ================================================================================
      Note: $(Platform) is the PROJECT platform, not the SOLUTION platform. If
            building in Visual Studio, this won't detect amd64 unless your build
            configuration sets the x64 platform for MinionMSI and MinionEXE, or
            you set TargetPlatform as a project variable in Visual Studio somewhere.
    ================================================================================
  -->
  <PropertyGroup>
    <TargetPlatform Condition="'$(TargetPlatform)'=='' AND '$(Platform)'=='x86'">win32</TargetPlatform>
    <TargetPlatform Condition="'$(TargetPlatform)'=='' AND '$(Platform)'=='x64'">amd64</TargetPlatform>
    <BuildEnv Condition="'$(BuildEnv)'==''">$([System.IO.Path]::GetFullPath('$(MSBuildProjectDirectory)\..\..\..\salt\pkg\windows\buildenv'))</BuildEnv>
    <DefineConstants>$(DefineConstants);dist=$(BuildEnv);TargetPlatform=$(TargetPlatform)</DefineConstants>
    <BUILD_NUMBER Condition="'$(BUILD_NUMBER)'==''">0</BUILD_NUMBER>
  </PropertyGroup>

  <!--
    ================================================================================
       setVersionProperties

         Queries salt for DisplayVersion and InternalVersion 
         Rewrites the output TargetName with the discovered version information.
         These msbuild variable are sent to WiX by in two different manners
           Output PropertyName
           DefineConstants magic
         
         TODO           get BUILD_NUMBER
         NICE-TO-HAVE   GIT_LAST_LOG    git log - - oneline -1
    ================================================================================
  -->
  <Target Name="setVersionProperties">

    <!--  
    ConsoleToMsBuild in Exec requires ToolsVersion="12.0" 
    Microsoft Build Tools 2013 
    download https://www.microsoft.com/en-in/download/details.aspx?id=40760  
    docs https://msdn.microsoft.com/en-us/library/hh162058(v=vs.121).aspx
     
    Exec runs in MSBuildProjectDirectory? why wix\MinionMSI\ ?
    -->
    <Exec Command="cd ,"                                             ConsoleToMsBuild="true"><Output TaskParameter="ConsoleOutput" PropertyName="mercury" /></Exec>
    <Exec Command="dir /b             versionDisplayOrInternal.py"   ConsoleToMsBuild="true"><Output TaskParameter="ConsoleOutput" PropertyName="venus" /></Exec>    
    <Exec Command="C:\Python27\python versionDisplayOrInternal.py"   ConsoleToMsBuild="true"><Output TaskParameter="ConsoleOutput" PropertyName="DisplayVersion" /></Exec>
    <Exec Command="C:\Python27\python versionDisplayOrInternal.py i" ConsoleToMsBuild="true"><Output TaskParameter="ConsoleOutput" PropertyName="InternalVersion" /></Exec>

    <Error Condition="'$(DisplayVersion)'==''"  Text="Must set DisplayVersion" />
    <Error Condition="'$(InternalVersion)'==''" Text="Must set InternalVersion" />

    <Message Text="******************************************************************************   "/>
    <Message Text="****************** common/targets/Minion.Common.targets **********************   "/>
    <Message Text="        pwd             = $(mercury)"/>
    <Message Text="        version shim    = $(venus)"/>
    <Message Text="        DisplayVersion  = $(DisplayVersion)"/>
    <Message Text="        InternalVersion = $(InternalVersion)"/>
    <Message Text="        Version         = $(Version)"/>
    <Message Text="        Where is Version set?"/>
    <Message Text="******************************************************************************   "/>

    <PropertyGroup>
      <DefineConstants>$(DefineConstants);DisplayVersion=$(DisplayVersion);InternalVersion=$(InternalVersion)</DefineConstants>
      <TargetName>Salt-Minion-$(DisplayVersion)-$(TargetPlatform)</TargetName>
    </PropertyGroup>
  </Target>

  <!--
    ================================================================================
       DistContent

         Build the list of files in $(BuildEnv). This runs every time as the output
         is necessary for other targets.

         [OUT]
         @(DistContent) - an ITaskItem[] containing all the extracted dist files.
    ================================================================================
  -->
  <Target Name="DistContent" DependsOnTargets="setVersionProperties" Outputs="@(DistContent)">
    <Message Text="Looking for distribution content in $([System.IO.Path]::GetFullPath('$(BuildEnv)'))"/>
    <ItemGroup>
      <DistContent Include="$(BuildEnv)\**\*.*" />
    </ItemGroup>
  </Target>

</Project>
