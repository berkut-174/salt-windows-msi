<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="14.0">

  <!--
    ================================================================================
      Note: $(Platform) is the PROJECT platform, not the SOLUTION platform. If
            building in Visual Studio, this won't detect amd64 unless your build
            configuration sets the x64 platform for MinionMSI and MinionEXE, or
            you set TargetPlatform as a project variable in Visual Studio somewhere.
    ================================================================================
  -->
  <PropertyGroup>
    <TargetPlatform Condition="'$(TargetPlatform)'=='' AND '$(Platform)'=='x86'">win32</TargetPlatform>
    <TargetPlatform Condition="'$(TargetPlatform)'=='' AND '$(Platform)'=='x64'">amd64</TargetPlatform>
    <BuildEnv Condition="'$(BuildEnv)'==''">$([System.IO.Path]::GetFullPath('$(MSBuildProjectDirectory)\..\..\..\salt\pkg\windows\buildenv'))</BuildEnv>
    <DefineConstants>$(DefineConstants);dist=$(BuildEnv);TargetPlatform=$(TargetPlatform)</DefineConstants>
    <BUILD_NUMBER Condition="'$(BUILD_NUMBER)'==''">0</BUILD_NUMBER>
  </PropertyGroup>

  <!--
    ================================================================================
       setVersionProperties

        Queries git for salt DisplayVersion and InternalVersion 
        These msbuild variable are sent to WiX by in two different manners:
           Output PropertyName
           DefineConstants magic

        Rewrites the output TargetName with the discovered version information.

    ================================================================================
  -->
  <Target Name="setVersionProperties">

    <!--  
    ConsoleToMsBuild in Exec requires ToolsVersion="12.0" 
    Microsoft Build Tools 2013 
     
    Exec runs in MSBuildProjectDirectory
    This depends on the target, it is      C:\git\salt-windows-msi\wix\MinionMSI       or    C:\git\salt-windows-msi
    So MSBuildProjectDirectory is not very usefull.
    Quirk: using hard coded path
    Maybe abandon to get the version from within msbuild, and give it to msbuild as a parameter, as saxonww did.
    -->
    <Message Text="******************************************************************************   "/>
    <Message Text="****************** msbuild.d/Minion.Common.targets ***************************   "/>
    <Exec Command="C:\Python27\python \git\salt\salt\version.py"     ConsoleToMsBuild="true"><Output TaskParameter="ConsoleOutput" PropertyName="DisplayVersion"  /></Exec>
    <Exec Command="C:\Python27\python \git\salt\salt\version.py msi" ConsoleToMsBuild="true"><Output TaskParameter="ConsoleOutput" PropertyName="InternalVersion" /></Exec>

    <Error Condition="'$(DisplayVersion)'==''"  Text="DisplayVersion must be set" />
    <Error Condition="'$(InternalVersion)'==''" Text="InternalVersion must be set" />

    <Message Text="******************************************************************************   "/>
    <Message Text="MSBuildProjectDirectory = $(MSBuildProjectDirectory)"/>
    <Message Text="        Configuration   = $(Configuration)"/>
    <Message Text="        TargetPlatform  = $(TargetPlatform)"/>
    <Message Text="        DisplayVersion  = $(DisplayVersion)"/>
    <Message Text="        InternalVersion = $(InternalVersion)"/>
    <Message Text="        Version (???)   = $(Version)"/>
    <Message Text="******************************************************************************   "/>

    <PropertyGroup>
      <DefineConstants>$(DefineConstants);DisplayVersion=$(DisplayVersion);InternalVersion=$(InternalVersion)</DefineConstants>
      <TargetName>Salt-Minion-$(DisplayVersion)-$(TargetPlatform)</TargetName>
    </PropertyGroup>
  </Target>

  <!--
    ================================================================================
       DistContent

         Build the list of files in $(BuildEnv). This runs every time as the output
         is necessary for other targets.

         [OUT]
         @(DistContent) - an ITaskItem[] containing all the extracted dist files.
    ================================================================================
  -->
  <Target Name="DistContent" DependsOnTargets="setVersionProperties" Outputs="@(DistContent)">
    <Message Text="Looking for distribution content in $([System.IO.Path]::GetFullPath('$(BuildEnv)'))"/>
    <ItemGroup>
      <DistContent Include="$(BuildEnv)\**\*.*" />
    </ItemGroup>
  </Target>

</Project>
